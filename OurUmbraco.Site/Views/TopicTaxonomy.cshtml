@inherits UmbracoTemplatePage
@using Examine.LuceneEngine.SearchCriteria;
@{
    Layout = "~/Views/Master.cshtml";
}
<div class="has-sidebar">
    <div class="documentation">
        <div class="page-content">
            <div class="sidebar-area">
                <div class="sidebar-content">
                    <div class="content-wrapper">
                        @Html.Partial("~/Views/Partials/Documentation/Navigation.cshtml")
                    </div><!-- .content-wrapper -->
                </div><!-- .sidebar-content -->
            </div><!-- .sidebar-area-->

            <div class="main-area">
                <div class="main-content">
                    <div class="content-wrapper">
                        <div>
                            @*@Html.Partial("~/Views/Partials/Documentation/Breadcrumb.cshtml")*@
                        </div>

                        <div class="search-big">
                            <div class="textSearch">
                                <input type="search" class="docs-search-input" required placeholder="Search for documentation">
                                <label for="search">Search for documentation</label>
                            </div>
                            <select class="version-search-select">
                                <option value="8">v8</option>
                                <option value="7" selected="selected">v7</option>
                                <option value="6">v6</option>
                            </select>
                        </div>


                        <ul class="search-all-results docs-search-listing"></ul>

                        @{
                            var searcher = ExamineManager.Instance.SearchProviderCollection["documentationSearcher"];
                            var searchCriteria = searcher.CreateSearchCriteria();

                            //path beginning with current filename
                            var query = searchCriteria.Field("topics", Model.Content.GetKey().ToString().ToLowerInvariant().MultipleCharacterWildcard()).Compile();
                            var searchResults = searcher.Search(query);

                            if (searchResults.TotalItemCount >= 1)
                            {
                            <ul class="search-all-results docs-search-listing">
                                @foreach (var searchResult in searchResults)
                                {
                                <li>
                                    <a href="@searchResult.Fields["url"]">
                                        <div class="type-icon">
                                            <i class="icon-Book-alt"></i>
                                        </div>
                                        <div class="type-context">
                                            <div class="type-name">
                                                @searchResult.Fields["nodeName"]
                                            </div>
                                            <div class="type-description">
                                                @{if (!string.IsNullOrEmpty(searchResult.Fields["meta.Description"]))
                                                    {
                                                        @searchResult.Fields["meta.Description"]
                                                    }
                                                    else
                                                    {
                                                        @Umbraco.TruncateByWords(searchResult.Fields["body"], 15, true)
                                                    }
                                                }
                                            </div>
                                        </div>
                                    </a>
                                </li>
                                }
                            </ul>
                            }
                        }

                    </div><!-- .content-wrapper -->
                </div><!-- .main-content -->
            </div><!-- .main-area -->

        </div><!-- .page-content -->

        <script type="text/template" class="search-item-docs">
            <li>
                <a href="{{ url }}">
                    <div class="type-icon">
                        <i class="icon-Book-alt"></i>
                    </div>

                    <div class="type-context">
                        <div class="type-name">
                            {{ name }}
                        </div>
                        <div class="type-description">
                            {{ body }}
                        </div>
                    </div>
                </a>
            </li>
        </script>
    </div>
</div>
